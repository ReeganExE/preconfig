---

  ## TODO - check if homebrew is already installed, if not run the script from homebrews website and then do the PATH adjustment

  # - name: Fail if machine is not arm64 (M1)
  #   fail:
  #     msg: "Only arm64 (M1) machines are supported! Yours is '{{ ansible_machine }}' based"
  #   when: ansible_machine != 'arm64'

  # - name: Determine Homebrew ownership variables
  #   set_fact:
  #     homebrew_user: '{{ homebrew_user | default(ansible_user_id) }}'
  #     homebrew_group: '{{ homebrew_group | default(ansible_user_gid) }}'

  # - name: Check if '{{ homebrew_install_path }}' already exists
  #   stat:
  #     path: "{{ homebrew_install_path }}"
  #   register: homebrew_install_folder_stat

  # - name: Check if '{{ homebrew_bin_folder_path }}' already exists
  #   stat:
  #     path: "{{ homebrew_bin_folder_path }}"
  #   register: homebrew_bin_folder_stat

  - name: Check if '{{ homebrew_bin_executable_path }}' already exists
    become: true
    stat:
      path: "{{ homebrew_bin_executable_path }}"
    register: homebrew_bin_executable_stat
    
  - name: If exists, run 'brew --verison' to make sure brew works
    command: "{{ homebrew_bin_executable_path }} --version"
    changed_when: false
    when: homebrew_bin_executable_stat.stat.exists

  - name: Install homebrew if {{ homebrew_bin_executable_path }} does not exist
    become: true
    command: "{{ homebrew_install_command }}"
    when: not homebrew_bin_executable_stat.stat.exists

  # Cask absent
  - name: Ensure blacklisted cask applications are not installed.
    homebrew_cask: "name={{ item }} state=absent"
    loop: "{{ homebrew_cask_uninstalled_apps }}"

  # Cask present
  - name: Install cask applications.
    homebrew_cask:
      name: "{{ item.name | default(item) }}"
      state: present
      install_options: "{{ item.install_options | default('appdir=' + homebrew_cask_appdir) }}"
      accept_external_apps: "{{ homebrew_cask_accept_external_apps }}"
      sudo_password: "{{ ansible_become_password | default(omit) }}"
    loop: "{{ homebrew_cask_apps }}"

  # Brew absent
  - name: Ensure blacklisted homebrew packages are not installed.
    homebrew: "name={{ item }} state=absent"
    loop: "{{ homebrew_uninstalled_packages }}"

  # Brew present
  - name: Ensure configured homebrew packages are installed.
    homebrew:
      name: "{{ item.name | default(item) }}"
      install_options: "{{ item.install_options | default(omit) }}"
      state: "{{ item.state | default('present') }}"
    loop: "{{ homebrew_installed_packages }}"